//
//  ListImagesViewController.swift
//  FlickerImages
//
//  Created by Arpit Srivastava on 16/07/20.
//  Copyright (c) 2020 Arpit Srivastava. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AlamofireImage

protocol ListImagesDisplayLogic: class {
    func displayRefresh(viewModel: ListImages.Refresh.ViewModel)
}

class ListImagesViewController: UIViewController, ListImagesDisplayLogic {
    
    //  Outlets
    @IBOutlet weak var imagesCollectionView: UICollectionView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    
    // Properties
    var interactor: ListImagesBusinessLogic?
    private var photosUrl: [URL] = []
    private var searchTerm = ""
    private var isLoadingAllowed = false
    private var showLoadMoreFooter = false
    private lazy var searchController: UISearchController = {
        let searchVC = SearchResultController()
        searchVC.searchDelegate = self
        let controller = UISearchController(searchResultsController: searchVC)
        controller.obscuresBackgroundDuringPresentation = true
        controller.searchResultsUpdater = nil
        controller.searchBar.placeholder = Constants.searchPlaceholder
        controller.searchBar.delegate = searchVC
        return controller
    }()
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        configureSearchController()
    }

    // MARK: ListImagesDisplayLogic
    func displayRefresh(viewModel: ListImages.Refresh.ViewModel) {
        activityIndicator.stopAnimating()
        showLoadMoreFooter = false
        photosUrl = viewModel.photoUrls
        imagesCollectionView.reloadData()
        isLoadingAllowed = true
    }

    // MARK: Private
    private func setup() {
        let viewController = self
        let interactor = ListImagesInteractor()
        let presenter = ListImagesPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    private func configureSearchController() {
        navigationItem.searchController = searchController
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationItem.hidesSearchBarWhenScrolling = false
        definesPresentationContext = false
    }
    
    private func fetchPhotos(searchTerm: String, shouldIncreasePageNumber: Bool) {
        activityIndicator.startAnimating()
        let request = ListImages.Refresh.Request(searchTerm: searchTerm, shouldIncreasePageNumber: shouldIncreasePageNumber)
        interactor?.refresh(request: request)
    }
}

extension ListImagesViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return photosUrl.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: Constants.imageCollectionCell, for: indexPath) as! ImageCollectionCell
        cell.imageView.af.setImage(withURL: photosUrl[indexPath.row], placeholderImage: UIImage(named: Constants.imagePlaceholder))
        return cell
    }
    
//    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
//        switch kind {
//        case UICollectionView.elementKindSectionFooter:
//            let footerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: Constants.loadMoreView, for: indexPath)
//            return footerView
//        default:
//            assert(false, "Unexpected supplementary element kind")
//        }
//    }
//
//    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -> CGSize {
//        if showLoadMoreFooter {
//            return CGSize(width: view.frame.size.width, height: 50)
//        }
//        return CGSize.zero
//    }
}

extension ListImagesViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let size = view.frame.size.width/3 - 3
        return CGSize(width: size, height: size)
    }
}

extension ListImagesViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        if ((scrollView.contentOffset.y + scrollView.frame.size.height) >= (scrollView.contentSize.height)){
            if isLoadingAllowed {
                isLoadingAllowed = false
                showLoadMoreFooter = false
                fetchPhotos(searchTerm: searchTerm, shouldIncreasePageNumber: true)
            }
        }
    }
}

extension ListImagesViewController : SearchResultControllerDelegate {
    func didTapSearchBar(withText searchText: String) {
        if !searchText.isEmpty {
            searchController.isActive = false
            searchController.searchBar.text = searchText
            imagesCollectionView.setContentOffset(.zero, animated: false)
            photosUrl.removeAll()
            imagesCollectionView.reloadData()
            searchTerm = searchText
            fetchPhotos(searchTerm: searchTerm, shouldIncreasePageNumber: false)
        }
    }
}

