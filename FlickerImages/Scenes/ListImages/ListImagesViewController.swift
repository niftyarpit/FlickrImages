//
//  ListImagesViewController.swift
//  FlickerImages
//
//  Created by Arpit Srivastava on 16/07/20.
//  Copyright (c) 2020 Arpit Srivastava. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AlamofireImage

protocol ListImagesDisplayLogic: AnyObject {
    func displayRefresh(viewModel: ListImages.Refresh.ViewModel)
}

class ListImagesViewController: UIViewController, ListImagesDisplayLogic {
    
    //  Outlets
    var imagesCollectionView: UICollectionView!
    var activityIndicator: UIActivityIndicatorView!
    
    // Properties
    var interactor: ListImagesBusinessLogic?
    var router: (ListImagesRoutingLogic & ListImagesDataPassing)?
    private var photosUrl: [URL] = []
    private var searchTerm = EMPTYSTRING
    private var isLoadingAllowed = false
    private var showLoadMoreFooter = false
    private lazy var searchController: UISearchController = {
        let searchVC = SearchResultController()
        searchVC.searchDelegate = self
        let controller = UISearchController(searchResultsController: searchVC)
        controller.obscuresBackgroundDuringPresentation = true
        controller.searchResultsUpdater = nil
        controller.searchBar.placeholder = Constants.searchPlaceholder
        controller.searchBar.delegate = searchVC
        return controller
    }()
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        configureViews()
        configureConstraints()
        configureSearchController()
    }

    // MARK: ListImagesDisplayLogic
    func displayRefresh(viewModel: ListImages.Refresh.ViewModel) {
        activityIndicator.stopAnimating()
        showLoadMoreFooter = false
        photosUrl = viewModel.photoUrls
        imagesCollectionView.reloadData()
        isLoadingAllowed = true
    }

    // MARK: Private
    private func setup() {
        let viewController = self
        let interactor = ListImagesInteractor()
        let presenter = ListImagesPresenter()
        let router = ListImagesRouter()
        viewController.router = router
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.dataStore = interactor
        router.viewController = viewController
    }
    
    private func configureViews() {
        navigationItem.title = Constants.navigationTitle
        view.backgroundColor = .white
        let layout = UICollectionViewFlowLayout()
        layout.sectionInset = .zero
        layout.sectionInset = .init(top: 1, left: 1, bottom: 1, right: 1)
        layout.minimumLineSpacing = 1
        layout.minimumInteritemSpacing = 1
        imagesCollectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        imagesCollectionView.backgroundColor = .white
        imagesCollectionView.dataSource = self
        imagesCollectionView.delegate = self
        imagesCollectionView.register(ImageCollectionCell.self, forCellWithReuseIdentifier: Constants.imageCollectionCell)
        view.addSubview(imagesCollectionView)
        activityIndicator = UIActivityIndicatorView(style: .large)
        activityIndicator.hidesWhenStopped = true
        view.addSubview(activityIndicator)
    }
    
    private func configureConstraints() {
        imagesCollectionView.setTranslateMask()
        let leading = imagesCollectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor)
        let trailing = imagesCollectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        let top = imagesCollectionView.topAnchor.constraint(equalTo: view.layoutMarginsGuide.topAnchor)
        let bottom = imagesCollectionView.bottomAnchor.constraint(equalTo: view.layoutMarginsGuide.bottomAnchor)
        activityIndicator.setTranslateMask()
        let bottomIndicator = activityIndicator.bottomAnchor.constraint(equalTo: view.layoutMarginsGuide.bottomAnchor)
        let centerXIndicator = activityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        NSLayoutConstraint.activate([leading, trailing, top, bottom, bottomIndicator, centerXIndicator])
    }
    
    private func configureSearchController() {
        navigationItem.searchController = searchController
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationItem.hidesSearchBarWhenScrolling = false
        definesPresentationContext = false
    }
    
    private func fetchPhotos(searchTerm: String, shouldIncreasePageNumber: Bool) {
        activityIndicator.startAnimating()
        let request = ListImages.Refresh.Request(searchTerm: searchTerm, shouldIncreasePageNumber: shouldIncreasePageNumber)
        interactor?.refresh(request: request)
    }
}

extension ListImagesViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        photosUrl.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: Constants.imageCollectionCell, for: indexPath) as! ImageCollectionCell
        cell.imageView.af.setImage(withURL: photosUrl[indexPath.row], placeholderImage: UIImage(named: Constants.imagePlaceholder))
        return cell
    }    
}

extension ListImagesViewController: UICollectionViewDelegate {

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        router?.routeToImageDetails(for: indexPath.row)
    }
}

extension ListImagesViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let size = view.frame.size.width/3 - 2
        return CGSize(width: size, height: size)
    }
}

extension ListImagesViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        if ((scrollView.contentOffset.y + scrollView.frame.size.height) >= (scrollView.contentSize.height)){
            if isLoadingAllowed {
                isLoadingAllowed = false
                showLoadMoreFooter = false
                fetchPhotos(searchTerm: searchTerm, shouldIncreasePageNumber: true)
            }
        }
    }
}

extension ListImagesViewController : SearchResultControllerDelegate {
    func didTapSearchBar(withText searchText: String) {
        if !searchText.isEmpty {
            searchController.isActive = false
            searchController.searchBar.text = searchText
            imagesCollectionView.setContentOffset(.zero, animated: false)
            photosUrl.removeAll()
            imagesCollectionView.reloadData()
            searchTerm = searchText
            fetchPhotos(searchTerm: searchTerm, shouldIncreasePageNumber: false)
        }
    }
}

protocol AutoLayable {
    func setTranslateMask()
}

extension UIView: AutoLayable {
    func setTranslateMask() {
        translatesAutoresizingMaskIntoConstraints = false
    }
}
