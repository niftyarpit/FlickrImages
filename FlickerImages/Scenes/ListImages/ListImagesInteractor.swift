//
//  ListImagesInteractor.swift
//  FlickerImages
//
//  Created by Arpit Srivastava on 16/07/20.
//  Copyright (c) 2020 Arpit Srivastava. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Foundation

protocol ListImagesDataStore {
    var photos: [PhotosList.Photos.Photo] { get }
}

protocol ListImagesBusinessLogic {
    func refresh(request: ListImages.Refresh.Request)
}

class ListImagesInteractor: ListImagesBusinessLogic, ListImagesDataStore {
    var presenter: ListImagesPresentationLogic?
    var worker = DataWorker(store: API())
    var photos: [PhotosList.Photos.Photo] = []
    private var pageNumber = 1
    private var searchTerm = EMPTYSTRING
    
    //MARK: ListImagesBusinessLogic
    func refresh(request: ListImages.Refresh.Request) {
        Task {
            // business logic
            if request.shouldIncreasePageNumber {
                self.pageNumber += 1
                print(self.pageNumber)
            }
            if request.searchTerm.lowercased() != self.searchTerm.lowercased() {
                self.resetStates()
                self.searchTerm = request.searchTerm
            }
            let params: [String: Any] = [Constants.searchTerm: self.searchTerm,
                                         Constants.pageNumber: self.pageNumber]
            // API call
            let result = await self.worker.fetchImagesList(using: params)
            switch result {
                case .success(let fetchedData):
                    self.photos.append(contentsOf: fetchedData.photos.photo)
                case .failure(let error):
                    switch error {
                        case .cannotFetch(let errorMessage):
                            print(errorMessage)
                    }
            }
            let photoUrls = self.getPhotoUrls()
            let response = ListImages.Refresh.Response(photoUrls: photoUrls)
            await MainActor.run {
                self.presenter?.presentRefresh(response: response)
            }
        }
    }
    
    // MARK: Private
    private func getPhotoUrls() -> [URL] {
        photos.map { URL(string: "https://farm\($0.farm).staticFlickr.com/\($0.server)/\($0.id)_\($0.secret)_m.jpg")! }
    }
    
    private func resetStates() {
        photos.removeAll()
        pageNumber = 1
    }
}
