//
//  ImageDetailsViewController.swift
//  FlickerImages
//
//  Created by Arpit Srivastava on 28/01/22.
//  Copyright (c) 2022 Arpit Srivastava. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AlamofireImage

protocol ImageDetailsDisplayLogic: AnyObject {
    func displayRefresh(viewModel: ImageDetails.Refresh.ViewModel)
}

final class ImageDetailsViewController: UIViewController, ImageDetailsDisplayLogic {
    var interactor: ImageDetailsBusinessLogic?
    var router: (ImageDetailsRoutingLogic & ImageDetailsDataPassing)?

    private var imageView: UIImageView!
    private var titleLabel: UILabel!
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = ImageDetailsInteractor()
        let router = ImageDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        configureViews()
        configureConstraints()
        refresh()
    }
    
    func displayRefresh(viewModel: ImageDetails.Refresh.ViewModel) {
        imageView.af.setImage(withURL: viewModel.url, placeholderImage: UIImage(named: Constants.imagePlaceholder))
        titleLabel.text = viewModel.title
    }
    
    private func refresh() {
        let request = ImageDetails.Refresh.Request()
        interactor?.refresh(request: request)
    }

    private func configureViews() {
        view.backgroundColor = .white
        imageView = UIImageView()
        imageView.clipsToBounds = true
        imageView.contentMode = .scaleAspectFit
        view.addSubview(imageView)
        titleLabel = UILabel()
        titleLabel.numberOfLines = 0
        titleLabel.textAlignment = .center
        view.addSubview(titleLabel)
    }

    private func configureConstraints() {
        imageView.setTranslateMask()
        let leading = imageView.leadingAnchor.constraint(equalTo: view.leadingAnchor)
        let trailing = imageView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        let top = imageView.topAnchor.constraint(equalTo: view.topAnchor)
        let bottom = imageView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        NSLayoutConstraint.activate([leading, trailing, top, bottom])
        titleLabel.setTranslateMask()
        let leadingTitle = titleLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor)
        let trailingTitle = titleLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        let bottomTitle = titleLabel.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        NSLayoutConstraint.activate([leadingTitle, trailingTitle, bottomTitle])
    }
}
